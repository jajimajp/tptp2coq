(* Generated by tptp2coqp *)
Require Import SMTCoq.SMTCoq ZArith.
Local Open Scope Z_scope.

(* axioms *)
Variable difference : Z -> Z -> Z.
Variable eta : Z -> Z.
Variable i : Z -> Z.
Variable j : Z -> Z.
Variable l : Z -> Z -> Z -> Z.
Variable one : Z.
Variable product : Z -> Z -> Z.
Variable quotient : Z -> Z -> Z.
Variable t : Z -> Z -> Z.
Axiom sos19 : forall A B C : Z, (t (eta A) (product B C)) = (product (t (eta A) B) (t (eta A) C)).
Axiom sos18 : forall A B : Z, (t A B) = (quotient (product A B) A).
Axiom sos17 : forall A B : Z, (product A (product B (eta A))) = (product (product A B) (eta A)).
Axiom sos16 : forall A B : Z, (product A (product (eta A) B)) = (product (j (j A)) B).
Axiom sos15 : forall A B : Z, (product (i (i A)) B) = (product (eta A) (product A B)).
Axiom sos14 : forall A B C : Z, (l A A (product B C)) = (product (l A A B) (l A A C)).
Axiom sos13 : forall A B C : Z, (l A B C) = (difference (product A B) (product A (product B C))).
Axiom sos12 : forall A : Z, (eta A) = (product (i A) A).
Axiom sos11 : forall A : Z, (product (i A) A) = (product A (j A)).
Axiom sos10 : forall A : Z, (j A) = (quotient one A).
Axiom sos09 : forall A : Z, (i A) = (difference A one).
Axiom sos08 : forall A B C : Z, (difference (product A B) (product A (product B C))) = (quotient (quotient (product C (product A B)) B) A).
Axiom sos07 : forall A B C : Z, (difference A (product (product A B) C)) = (quotient (product B (product C A)) A).
Axiom sos06 : forall A B : Z, (product (quotient A B) B) = A.
Axiom sos05 : forall A B : Z, (quotient (product A B) B) = A.
Axiom sos04 : forall A B : Z, (difference A (product A B)) = B.
Axiom sos03 : forall A B : Z, (product A (difference A B)) = B.
Axiom sos02 : forall A : Z, (product one A) = A.
Axiom sos01 : forall A : Z, (product A one) = A.

Add_lemmas sos19 sos18 sos17 sos16 sos15 sos14 sos13 sos12 sos11 sos10 sos09 sos08 sos07 sos06 sos05 sos04 sos03 sos02 sos01.

(* Goal *)
Theorem check : (product (eta x0) (product x1 x2)) = (product (product (eta x0) x1) x2).
Proof.
  smt.
Qed.

Check check.

