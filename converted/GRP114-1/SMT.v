(* Generated by tptp2coqp *)
Require Import SMTCoq.SMTCoq ZArith.
Local Open Scope Z_scope.

(* axioms *)
Variable identity : Z.
Variable intersection : Z -> Z -> Z.
Variable inverse : Z -> Z.
Variable multiply : Z -> Z -> Z.
Variable negative_part : Z -> Z.
Variable positive_part : Z -> Z.
Variable union : Z -> Z -> Z.
Axiom negative_part : forall X : Z, (negative_part X) = (intersection X identity).
Axiom positive_part : forall X : Z, (positive_part X) = (union X identity).
Axiom multiply_intersection2 : forall X Y Z : Z, (multiply (intersection Y Z) X) = (intersection (multiply Y X) (multiply Z X)).
Axiom multiply_union2 : forall X Y Z : Z, (multiply (union Y Z) X) = (union (multiply Y X) (multiply Z X)).
Axiom multiply_intersection1 : forall X Y Z : Z, (multiply X (intersection Y Z)) = (intersection (multiply X Y) (multiply X Z)).
Axiom multiply_union1 : forall X Y Z : Z, (multiply X (union Y Z)) = (union (multiply X Y) (multiply X Z)).
Axiom intersection_union_absorbtion : forall X Y : Z, (intersection (union X Y) Y) = Y.
Axiom union_intersection_absorbtion : forall X Y : Z, (union (intersection X Y) Y) = Y.
Axiom union_associative : forall X Y Z : Z, (union X (union Y Z)) = (union (union X Y) Z).
Axiom intersection_associative : forall X Y Z : Z, (intersection X (intersection Y Z)) = (intersection (intersection X Y) Z).
Axiom union_commutative : forall X Y : Z, (union X Y) = (union Y X).
Axiom intersection_commutative : forall X Y : Z, (intersection X Y) = (intersection Y X).
Axiom union_idempotent : forall X : Z, (union X X) = X.
Axiom intersection_idempotent : forall X : Z, (intersection X X) = X.
Axiom inverse_product_lemma : forall X Y : Z, (inverse (multiply X Y)) = (multiply (inverse Y) (inverse X)).
Axiom inverse_involution : forall X : Z, (inverse (inverse X)) = X.
Axiom inverse_of_identity : (inverse identity) = identity.
Axiom associativity : forall X Y Z : Z, (multiply (multiply X Y) Z) = (multiply X (multiply Y Z)).
Axiom left_inverse : forall X : Z, (multiply (inverse X) X) = identity.
Axiom left_identity : forall X : Z, (multiply identity X) = X.

Add_lemmas negative_part positive_part multiply_intersection2 multiply_union2 multiply_intersection1 multiply_union1 intersection_union_absorbtion union_intersection_absorbtion union_associative intersection_associative union_commutative intersection_commutative union_idempotent intersection_idempotent inverse_product_lemma inverse_involution inverse_of_identity associativity left_inverse left_identity.

(* Goal *)
Theorem check : (multiply (positive_part a) (negative_part a)) = a.
Proof.
  smt.
Qed.

Check check.

